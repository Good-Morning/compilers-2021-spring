-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | Weak -> Seq (v, Const (0))
  | _    -> error ("reference expected", loc)
  esac
}

fun assertRef (atr, v, loc) {
  case atr of
    Ref  -> Ref (v)
  | Void -> Skip
  | _    -> Var (v)
  esac
}

fun assertF (f, v, loc) {
  fun (a) {
    f (a, v, loc)
  }
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

fun inbr (l, e, r) {
  syntax (-l e -r)
}

fun inpar (p) {
  inbr (s ("("), p, s (")"))
}   

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Var (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Var (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

var primary    = memo $ eta syntax (
                                    loc=pos x=decimal { assertF (assertValue, Const (stringInt (x)), loc) } |
                                    loc=pos x=lident { assertF (assertRef, x, loc) } |
                                    x=lident args=inbr[s("("), list0(syntax(e=exp {e(Val)})), s(")")]? {fun (a) {
                                                                                                            case args of
                                                                                                              None -> assertRef (a, x)
                                                                                                            | Some (args) -> assertValue (a, Call (x, args))
                                                                                                            esac
                                                                                                         }} |
                                    inpar[exp] |
                                    loc=pos kSkip { assertF (assertVoid, Skip, loc) } |
                                    loc=pos kWrite from=inpar[exp] { assertF (assertVoid, Write (from (Val)), loc) } |
                                    loc=pos kRead to=inpar[exp] { assertF (assertVoid, Read (to (Ref)), loc) } |
                                    kWhile expr=exp kDo loc=pos body=exp kOd { assertF (assertVoid, While (expr (Val), body (Void)), loc) } |
                                    kDo loc=pos body=exp kWhile expr=exp kOd { assertF (assertVoid, DoWhile (body (Void), expr (Val)), loc) } |
                                    kIf cond=exp kThen body=exp elfs=elifs { fun (a) { If (cond (Val), body (a), elfs (a)) } } |
                                    kFor init=exp s[","] cond=exp s[","] inc=exp kDo loc=pos body=exp kOd { assertF (assertVoid, Seq (init (Void), While (cond (Val), Seq (body (Void), inc (Void)))), loc) }),
      elifs = memo $ eta syntax (
                                kElif cond=exp kThen body=exp elfs=elifs { fun (a) { If (cond (Val), body (a), elfs (a)) } } |
                                -kElse exp -kFi |
                                loc=pos kFi { assertF (assertVoid, Skip, loc) }), 
      scopeExpr = memo $ eta syntax ($(failure ("scope expression parsing is not implemented\n"))),
      basic      = memo $ eta (expr ({[Right, {[s (":="),
                                                fun (l, loc, r) {
                                                  fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                }]}],
                                      [Left , map (binop, {"!!"})],
                                      [Left , map (binop, {"&&"})],
                                      [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                      [Left , map (binop, {"+", "-"})],
                                      [Left , map (binop, {"*", "/", "%"})]
                                     },
                                     primary)),
      exp        = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void)});
